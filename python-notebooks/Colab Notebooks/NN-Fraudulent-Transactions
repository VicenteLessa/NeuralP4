{"cells":[{"cell_type":"markdown","metadata":{"id":"bjA_Q0lNZ1Nd"},"source":["# **Preparando os arquivos do dataset através da API do kaggle**\n","\n","---\n"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"6fTtaZ42WcdF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649712456500,"user_tz":180,"elapsed":14,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}},"outputId":"2caa0a13-f06c-45d8-b948-95696a997205"},"outputs":[{"output_type":"stream","name":"stdout","text":["mkdir: cannot create directory ‘/root/.kaggle’: File exists\n"]}],"source":["!mkdir  ~/.kaggle #create the .kaggle folder in your root directory"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":941,"status":"ok","timestamp":1649712457435,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"},"user_tz":180},"id":"WbW6HxdYYZAJ","outputId":"a349e12d-4b8a-41a6-e7b2-fa1c6dab453b"},"outputs":[{"output_type":"stream","name":"stdout","text":["fraudulent-transactions-prediction.zip: Skipping, found more recently modified local copy (use --force to force download)\n"]}],"source":["!echo '{\"username\":\"pedrotkm\",\"key\":\"67bd9e622c763b08262ca1dedbad9df9\"}' > ~/.kaggle/kaggle.json #write kaggle API credentials to kaggle.json\n","!chmod 600 ~/.kaggle/kaggle.json  # set permissions\n","\n","#!kaggle datasets list -s \"fraudulent-transactions-prediction\"\n","!kaggle datasets download -d \"vardhansiramdasu/fraudulent-transactions-prediction\" -p ./kaggle\n"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":236398,"status":"ok","timestamp":1649712693829,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"},"user_tz":180},"id":"uCpmaAszZTGg","outputId":"6334c611-caf4-4807-add7-b19c84a4bc96"},"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  ./kaggle/fraudulent-transactions-prediction.zip\n","replace Fraud.csv? [y]es, [n]o, [A]ll, [N]one, [r]ename: "]}],"source":["!unzip ./kaggle/fraudulent-transactions-prediction.zip "]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1649712693830,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"},"user_tz":180},"id":"Km99z_fuZZ_q","outputId":"8b9f68fa-4732-404e-bc52-61022f1db49b"},"outputs":[{"output_type":"stream","name":"stdout","text":["-rw-r--r-- 1 root root 471M Mar 21 16:10 Fraud.csv\n"]}],"source":["!ls -lh Fraud.csv"]},{"cell_type":"code","source":["# instalar o pprint para printar dicts de forma bonitinha\n","!pip install pprintpp"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wzLBJfOF3lbd","executionInfo":{"status":"ok","timestamp":1649712697133,"user_tz":180,"elapsed":3310,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}},"outputId":"cbe447f3-4b43-4cb7-f717-315103d429af"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pprintpp in /usr/local/lib/python3.7/dist-packages (0.4.0)\n"]}]},{"cell_type":"markdown","metadata":{"id":"bFTApNpWbg8L"},"source":["# **Carregando os dados e fazendo uma pequena limpa**"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":250},"executionInfo":{"elapsed":4127,"status":"ok","timestamp":1649712701255,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"},"user_tz":180},"id":"zUiavfJw6JFD","outputId":"1b94a74a-8f00-4455-a98f-c3bf1411efed"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n","0     1   PAYMENT   9839.64  C1231006815       170136.0       160296.36   \n","1     1   PAYMENT   1864.28  C1666544295        21249.0        19384.72   \n","2     1  TRANSFER    181.00  C1305486145          181.0            0.00   \n","3     1  CASH_OUT    181.00   C840083671          181.0            0.00   \n","4     1   PAYMENT  11668.14  C2048537720        41554.0        29885.86   \n","\n","      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n","0  M1979787155             0.0             0.0        0               0  \n","1  M2044282225             0.0             0.0        0               0  \n","2   C553264065             0.0             0.0        1               0  \n","3    C38997010         21182.0             0.0        1               0  \n","4  M1230701703             0.0             0.0        0               0  "],"text/html":["\n","  <div id=\"df-6e8b7376-205e-483e-b679-f307d99e47ed\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>type</th>\n","      <th>amount</th>\n","      <th>nameOrig</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>nameDest</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","      <th>isFlaggedFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>PAYMENT</td>\n","      <td>9839.64</td>\n","      <td>C1231006815</td>\n","      <td>170136.0</td>\n","      <td>160296.36</td>\n","      <td>M1979787155</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>PAYMENT</td>\n","      <td>1864.28</td>\n","      <td>C1666544295</td>\n","      <td>21249.0</td>\n","      <td>19384.72</td>\n","      <td>M2044282225</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>TRANSFER</td>\n","      <td>181.00</td>\n","      <td>C1305486145</td>\n","      <td>181.0</td>\n","      <td>0.00</td>\n","      <td>C553264065</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>CASH_OUT</td>\n","      <td>181.00</td>\n","      <td>C840083671</td>\n","      <td>181.0</td>\n","      <td>0.00</td>\n","      <td>C38997010</td>\n","      <td>21182.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>PAYMENT</td>\n","      <td>11668.14</td>\n","      <td>C2048537720</td>\n","      <td>41554.0</td>\n","      <td>29885.86</td>\n","      <td>M1230701703</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e8b7376-205e-483e-b679-f307d99e47ed')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6e8b7376-205e-483e-b679-f307d99e47ed button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6e8b7376-205e-483e-b679-f307d99e47ed');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}],"source":["import pandas as pd\n","from sklearn import metrics\n","from sklearn.model_selection import train_test_split\n","from sklearn.neighbors import KNeighborsClassifier\n","import numpy as np\n","\n","def clean_dataset(df):\n","    assert isinstance(df, pd.DataFrame), \"df needs to be a pd.DataFrame\"\n","    df.dropna(inplace=True)\n","    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\n","    return df[indices_to_keep].astype(np.float64)\n","\n","dataset = pd.read_csv(\"Fraud.csv\", nrows=1000000)\n","\n","#pd.set_option('display.float_format', lambda x: '%.5f' % x)\n","\n","dataset.head(5)"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"elapsed":502,"status":"ok","timestamp":1649712701751,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"},"user_tz":180},"id":"54jzWq-c8HLr","outputId":"80775df9-250f-424a-d73f-d95084469ef9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 step        amount  oldbalanceOrg  newbalanceOrig  \\\n","count  1000000.000000  1.000000e+06   1.000000e+06    1.000000e+06   \n","mean        25.156387  1.602499e+05   8.776703e+05    8.983465e+05   \n","std         12.652100  2.592584e+05   2.982420e+06    3.019326e+06   \n","min          1.000000  1.000000e-01   0.000000e+00    0.000000e+00   \n","25%         14.000000  1.275993e+04   0.000000e+00    0.000000e+00   \n","50%         20.000000  7.953670e+04   1.595700e+04    0.000000e+00   \n","75%         38.000000  2.166060e+05   1.397520e+05    1.797911e+05   \n","max         45.000000  1.000000e+07   3.893942e+07    3.894623e+07   \n","\n","       oldbalanceDest  newbalanceDest         isFraud  isFlaggedFraud  \n","count    1.000000e+06    1.000000e+06  1000000.000000       1000000.0  \n","mean     9.860668e+05    1.125662e+06        0.000535             0.0  \n","std      2.305423e+06    2.426587e+06        0.023124             0.0  \n","min      0.000000e+00    0.000000e+00        0.000000             0.0  \n","25%      0.000000e+00    0.000000e+00        0.000000             0.0  \n","50%      1.349287e+05    2.301105e+05        0.000000             0.0  \n","75%      9.268256e+05    1.167926e+06        0.000000             0.0  \n","max      4.205466e+07    4.216916e+07        1.000000             0.0  "],"text/html":["\n","  <div id=\"df-70b2f071-436d-44e4-a570-d4fc5e1fa935\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","      <th>isFlaggedFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1000000.000000</td>\n","      <td>1.000000e+06</td>\n","      <td>1.000000e+06</td>\n","      <td>1.000000e+06</td>\n","      <td>1.000000e+06</td>\n","      <td>1.000000e+06</td>\n","      <td>1000000.000000</td>\n","      <td>1000000.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>25.156387</td>\n","      <td>1.602499e+05</td>\n","      <td>8.776703e+05</td>\n","      <td>8.983465e+05</td>\n","      <td>9.860668e+05</td>\n","      <td>1.125662e+06</td>\n","      <td>0.000535</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>12.652100</td>\n","      <td>2.592584e+05</td>\n","      <td>2.982420e+06</td>\n","      <td>3.019326e+06</td>\n","      <td>2.305423e+06</td>\n","      <td>2.426587e+06</td>\n","      <td>0.023124</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>1.000000e-01</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>14.000000</td>\n","      <td>1.275993e+04</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>20.000000</td>\n","      <td>7.953670e+04</td>\n","      <td>1.595700e+04</td>\n","      <td>0.000000e+00</td>\n","      <td>1.349287e+05</td>\n","      <td>2.301105e+05</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>38.000000</td>\n","      <td>2.166060e+05</td>\n","      <td>1.397520e+05</td>\n","      <td>1.797911e+05</td>\n","      <td>9.268256e+05</td>\n","      <td>1.167926e+06</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>45.000000</td>\n","      <td>1.000000e+07</td>\n","      <td>3.893942e+07</td>\n","      <td>3.894623e+07</td>\n","      <td>4.205466e+07</td>\n","      <td>4.216916e+07</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70b2f071-436d-44e4-a570-d4fc5e1fa935')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-70b2f071-436d-44e4-a570-d4fc5e1fa935 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-70b2f071-436d-44e4-a570-d4fc5e1fa935');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}],"source":["dataset.describe()"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"6e1sn9Ou8R_U","executionInfo":{"status":"ok","timestamp":1649712701752,"user_tz":180,"elapsed":9,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}}},"outputs":[],"source":["# Separo as labels das features que vou utilizar para treinar\n","\n","labels   = dataset[\"isFraud\"]\n","train_features = dataset.drop([\"step\", \"type\", \"nameOrig\", \"nameDest\", \"isFraud\"], axis=1)\n","#train_features.head(20)\n","#test_feature.head(20)"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"aqHAYKRhGmFv","executionInfo":{"status":"ok","timestamp":1649712701753,"user_tz":180,"elapsed":9,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}}},"outputs":[],"source":["# Limpar o dataset de treino porque alguns valores de algumas colunas estao retornando NaN ou inf\n","# Verificar se é a notaçao cientifica que está encrencando\n","\n","# !!! Nao precisa mais, mas vou deixar aqui por precauçao !!!\n","#clean_dataset(train_features)"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"dJq8ZfaCE3xJ","executionInfo":{"status":"ok","timestamp":1649712701755,"user_tz":180,"elapsed":11,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}}},"outputs":[],"source":["# Debugg\n","# np.any(np.isnan(train_features))\n","# np.all(np.isfinite(train_features))"]},{"cell_type":"markdown","source":["# **Função própria para matriz de confusão e métricas**"],"metadata":{"id":"nyz4j-Y-TPFx"}},{"cell_type":"code","source":["# Funçao que recebe duas listas com classe predita e classe verdadeira\n","# e retorna uma matriz de confusao e metricas: precisao, acuracia, recall, f-measure\n","# recebe duas listas, uma com as classes preditas e outra com as classes verdadeiras\n","def get_metrics2(y_pred, y_real):\n","  tp, tn, fp, fn = 0, 0, 0, 0\n","\n","  for i in range(len(y_pred)): \n","      if y_real[i]==y_pred[i]==1: tp += 1\n","      if y_pred[i]==1 and y_real[i]!=y_pred[i]: fp += 1\n","      if y_real[i]==y_pred[i]==0: tn += 1\n","      if y_pred[i]==0 and y_real[i]!=y_pred[i]: fn += 1\n","\n","  conf_matrix = [[tp, fn],\n","                 [fp, tn]]\n","                 \n","  accuracy = (tp + tn) / (tp + fn + fp + tn + 1)\n","  recall = tp / (tp+fn+1) \n","  precision = tp / (tp + fp+1) \n","  f_measure = ( 2 * recall * precision ) / (precision + recall+1)\n","  specificity = tn / (fp + tn+1)\n","\n","\n","  return {\"confusion_matrix\": conf_matrix, \"accuracy\": accuracy, \"recall\": recall,\n","          \"precision\": precision, \"f-measure\": f_measure, \"specificity\": specificity\n","          }\n","\n","\n"],"metadata":{"id":"y3PP1yhOVPCb","executionInfo":{"status":"ok","timestamp":1649712701756,"user_tz":180,"elapsed":12,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":["# **K-Fold Cross Validation**"],"metadata":{"id":"vjraiHw65oG0"}},{"cell_type":"code","source":["import numpy as np\n","\n","#  A estratégia deve ser aplicada de forma estratificada, isto é, mantendo-se a proporção ori/ginal\n","#  de exemplos por classe em todos os folds, independente do número de classes do problema.\n","\n","\n","def get_folds(dataset, k=10):\n","\n","  # Como a estrategia deve manter a proporção original de exemplos por classe em TODOS os folds\n","  # Vou criar folds com a classe nao fraude e folds com a classe fraud e depois uní-los\n","  \n","  fraud_data = dataset.loc[dataset[\"isFraud\"] == 1]\n","  not_fraud_data = dataset.loc[dataset[\"isFraud\"] == 0]\n","  folds_fraud = np.array_split(fraud_data, k)\n","  folds_not_fraud = np.array_split(not_fraud_data, k)\n","\n","\n","  folds = [ folds_fraud[i].append(folds_not_fraud[i]) for i in range(0,k) ]\n","\n","  return folds\n","\n","# Funçao recebe um dataset, um k = numero de folds e um método de aprendizado supervisionado\n","# O método deve retornar as classes preditas e as classes reais para a partir disso\n","# esta funçao calcular as métricas\n","def k_fold_cross_validation(dataset, method, k=10):\n","\n","  folds = get_folds(dataset, k)\n","\n","  metrics = []\n","  for i in range(0,k):\n","    train_folds = [ folds[j] for j in range(0,k) ]\n","    test = train_folds.pop(i)\n","\n","    train = pd.concat(train_folds)\n","\n","    fold_metrics = method(train, test)\n","    metrics.append(fold_metrics)\n","\n","  agg_metrics = {\"accuracy\": sum(m[\"accuracy\"] for m in metrics) / k,\n","                 \"f-measure\": sum(m[\"f-measure\"] for m in metrics) / k,\n","                 \"precision\": sum(m[\"precision\"] for m in metrics) / k,\n","                 \"recall\": sum(m[\"recall\"] for m in metrics) / k,\n","                 \"specificity\": sum(m[\"specificity\"] for m in metrics) / k}\n","\n","  return agg_metrics\n"],"metadata":{"id":"dJ4V4CvC5tjL","executionInfo":{"status":"ok","timestamp":1649712701758,"user_tz":180,"elapsed":13,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["folds = get_folds(dataset)\n","\n","# Todos os folds com distribuição proporcional de classes\n","#for i in range(0,10):\n","#  print(\"fold \", i, \"distribution : \", folds[i][\"isFraud\"].value_counts())\n"],"metadata":{"id":"qBff2h4chydw","executionInfo":{"status":"ok","timestamp":1649712702465,"user_tz":180,"elapsed":719,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["# Neural Network"],"metadata":{"id":"sK79RAY2V7Ru"}},{"cell_type":"code","source":["from sklearn.neural_network import MLPClassifier\n","from pprint import pprint\n","\n","labels   = dataset[\"isFraud\"]\n","train_features = dataset.drop([\"step\", \"type\", \"nameOrig\", \"nameDest\", \"isFraud\", \"isFlaggedFraud\"], axis=1)\n","\n","normalized_train_features = (train_features-train_features.min())/(train_features.max()-train_features.min())\n","normalized_train_features[\"isFlaggedFraud\"] = dataset[\"isFlaggedFraud\"]\n","\n","x_train, x_test, y_train, y_test = train_test_split(normalized_train_features, labels, test_size=0.2)\n","y_real = y_test\n","\n","nn_model = MLPClassifier(random_state=1, max_iter=50, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.00001, activation=\"relu\")\n","nn_model.fit(x_train, y_train)\n","y_pred = nn_model.predict(x_test)\n","print(\"Our metrics considering isfraud 1 is our positive class: \")\n","pprint(get_metrics(list(y_pred), list(y_real)))\n","print(\"#####\")\n","print(\"Native methods to compute the metrics above\")\n","print(\"Accuracy:\", metrics.accuracy_score(y_real, y_pred))\n","print(\"Precision:\", metrics.precision_score(y_real, y_pred, average=None))\n","print(\"Recall:\", metrics.recall_score(y_real, y_pred, average=None))\n","print(\"#####\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7y4oA9BcjfaT","executionInfo":{"status":"ok","timestamp":1649717157428,"user_tz":180,"elapsed":76123,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}},"outputId":"2468e01a-1d06-45d3-affb-c96802b2c05e"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Our metrics considering isfraud 1 is our positive class: \n","{'accuracy': 0.9995700021499893,\n"," 'confusion_matrix': [[28, 76], [9, 199887]],\n"," 'f-measure': 0.19614711033274956,\n"," 'precision': 0.7368421052631579,\n"," 'recall': 0.26666666666666666,\n"," 'specificity': 0.9999499742367319}\n","#####\n","Native methods to compute the metrics above\n","Accuracy: 0.999575\n","Precision: [0.99961993 0.75675676]\n","Recall: [0.99995498 0.26923077]\n","#####\n"]}]},{"cell_type":"code","source":["from sklearn.neural_network import MLPClassifier\n","from pprint import pprint\n","\n","labels   = dataset[\"isFraud\"]\n","train_features = dataset.drop([\"step\", \"type\", \"nameOrig\", \"nameDest\", \"isFraud\", \"isFlaggedFraud\"], axis=1)\n","\n","normalized_train_features = (train_features-train_features.min())/(train_features.max()-train_features.min())\n","normalized_train_features[\"isFlaggedFraud\"] = dataset[\"isFlaggedFraud\"]\n","\n","x_train, x_test, y_train, y_test = train_test_split(normalized_train_features, labels, test_size=0.2)\n","y_real = y_test\n","\n","nn_model = MLPClassifier(random_state=1, max_iter=10, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.0001, activation=\"relu\", beta_1 = 0.5)\n","nn_model.fit(x_train, y_train)\n","y_pred = nn_model.predict(x_test)\n","print(\"Native methods to compute the metrics above\")\n","print(\"Accuracy:\", metrics.accuracy_score(y_real, y_pred))\n","print(\"Precision:\", metrics.precision_score(y_real, y_pred, average=None))\n","print(\"Recall:\", metrics.recall_score(y_real, y_pred, average=None))\n","print(\"#####\")\n","\n","nn_model = MLPClassifier(random_state=1, max_iter=25, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.0001, activation=\"relu\", beta_1 = 0.5)\n","nn_model.fit(x_train, y_train)\n","y_pred = nn_model.predict(x_test)\n","print(\"Native methods to compute the metrics above\")\n","print(\"Accuracy:\", metrics.accuracy_score(y_real, y_pred))\n","print(\"Precision:\", metrics.precision_score(y_real, y_pred, average=None))\n","print(\"Recall:\", metrics.recall_score(y_real, y_pred, average=None))\n","print(\"#####\")\n","\n","nn_model = MLPClassifier(random_state=1, max_iter=50, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.0001, activation=\"relu\", beta_1 = 0.5)\n","nn_model.fit(x_train, y_train)\n","y_pred = nn_model.predict(x_test)\n","print(\"Native methods to compute the metrics above\")\n","print(\"Accuracy:\", metrics.accuracy_score(y_real, y_pred))\n","print(\"Precision:\", metrics.precision_score(y_real, y_pred, average=None))\n","print(\"Recall:\", metrics.recall_score(y_real, y_pred, average=None))\n","print(\"#####\")\n","\n","\n","nn_model = MLPClassifier(random_state=1, max_iter=10, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.0001, activation=\"relu\", beta_1 = 0.7)\n","nn_model.fit(x_train, y_train)\n","y_pred = nn_model.predict(x_test)\n","print(\"Native methods to compute the metrics above\")\n","print(\"Accuracy:\", metrics.accuracy_score(y_real, y_pred))\n","print(\"Precision:\", metrics.precision_score(y_real, y_pred, average=None))\n","print(\"Recall:\", metrics.recall_score(y_real, y_pred, average=None))\n","print(\"#####\")\n","\n","nn_model = MLPClassifier(random_state=1, max_iter=25, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.0001, activation=\"relu\", beta_1 = 0.7)\n","nn_model.fit(x_train, y_train)\n","y_pred = nn_model.predict(x_test)\n","print(\"Native methods to compute the metrics above\")\n","print(\"Accuracy:\", metrics.accuracy_score(y_real, y_pred))\n","print(\"Precision:\", metrics.precision_score(y_real, y_pred, average=None))\n","print(\"Recall:\", metrics.recall_score(y_real, y_pred, average=None))\n","print(\"#####\")\n","\n","nn_model = MLPClassifier(random_state=1, max_iter=50, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.0001, activation=\"relu\", beta_1 = 0.7)\n","nn_model.fit(x_train, y_train)\n","y_pred = nn_model.predict(x_test)\n","print(\"Native methods to compute the metrics above\")\n","print(\"Accuracy:\", metrics.accuracy_score(y_real, y_pred))\n","print(\"Precision:\", metrics.precision_score(y_real, y_pred, average=None))\n","print(\"Recall:\", metrics.recall_score(y_real, y_pred, average=None))\n","print(\"#####\")\n","\n","nn_model = MLPClassifier(random_state=1, max_iter=10, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.0001, activation=\"relu\", beta_1 = 0.99)\n","nn_model.fit(x_train, y_train)\n","y_pred = nn_model.predict(x_test)\n","print(\"Native methods to compute the metrics above\")\n","print(\"Accuracy:\", metrics.accuracy_score(y_real, y_pred))\n","print(\"Precision:\", metrics.precision_score(y_real, y_pred, average=None))\n","print(\"Recall:\", metrics.recall_score(y_real, y_pred, average=None))\n","print(\"#####\")\n","\n","nn_model = MLPClassifier(random_state=1, max_iter=25, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.0001, activation=\"relu\", beta_1 = 0.99)\n","nn_model.fit(x_train, y_train)\n","y_pred = nn_model.predict(x_test)\n","print(\"Native methods to compute the metrics above\")\n","print(\"Accuracy:\", metrics.accuracy_score(y_real, y_pred))\n","print(\"Precision:\", metrics.precision_score(y_real, y_pred, average=None))\n","print(\"Recall:\", metrics.recall_score(y_real, y_pred, average=None))\n","print(\"#####\")\n","\n","nn_model = MLPClassifier(random_state=1, max_iter=50, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.0001, activation=\"relu\", beta_1 = 0.99)\n","nn_model.fit(x_train, y_train)\n","y_pred = nn_model.predict(x_test)\n","print(\"Native methods to compute the metrics above\")\n","print(\"Accuracy:\", metrics.accuracy_score(y_real, y_pred))\n","print(\"Precision:\", metrics.precision_score(y_real, y_pred, average=None))\n","print(\"Recall:\", metrics.recall_score(y_real, y_pred, average=None))\n","print(\"#####\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ABvo2t1N2cRb","executionInfo":{"status":"error","timestamp":1649712714070,"user_tz":180,"elapsed":1213,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}},"outputId":"1335aceb-aa1f-4ed0-bf29-1ace80925d3a"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["\n","KeyboardInterrupt\n","\n"]}]},{"cell_type":"markdown","source":["# NN K-FoLD"],"metadata":{"id":"7So6YllQfaHb"}},{"cell_type":"code","source":["from sklearn.neural_network import MLPClassifier\n","\n","def neural_method(train, test):\n","\n","  y_train = train[\"isFraud\"]\n","  x_train = train.drop([\"step\", \"type\", \"nameOrig\", \"nameDest\", \"isFraud\"], axis=1)\n","  y_test = test[\"isFraud\"]\n","  x_test = test.drop([\"step\", \"type\", \"nameOrig\", \"nameDest\", \"isFraud\"], axis=1)\n","  \n","  nn_model = MLPClassifier(random_state=1, max_iter=25, hidden_layer_sizes=(16, 16, 16, 2), alpha=0.00001, activation=\"relu\", tol = 0.00001)\n","  nn_model.fit(x_train, y_train)\n","\n","  y_pred = nn_model.predict(x_test)\n","\n","\n","  metrics = get_metrics(list(y_pred), list(y_test))\n","\n","  return metrics"],"metadata":{"id":"HzLenFc7fmM4","executionInfo":{"status":"ok","timestamp":1649715408361,"user_tz":180,"elapsed":244,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["k_fold_cross_validation(dataset, neural_method)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3hvs2E8GhyL1","outputId":"b0ff5eeb-ab37-4adf-e886-3655f2972d6f","executionInfo":{"status":"ok","timestamp":1649716703621,"user_tz":180,"elapsed":1293072,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}}},"execution_count":20,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (25) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (25) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (25) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (25) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (25) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (25) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:696: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (25) reached and the optimization hasn't converged yet.\n","  ConvergenceWarning,\n"]},{"output_type":"execute_result","data":{"text/plain":["{'accuracy': 0.99945500549989,\n"," 'f-measure': 0.0,\n"," 'precision': 0.0,\n"," 'recall': 0.0,\n"," 'specificity': 0.9999899947472422}"]},"metadata":{},"execution_count":20}]}],"metadata":{"colab":{"collapsed_sections":["o73iNHz8bowv"],"name":"NN-Fraudulent-Transactions","provenance":[{"file_id":"1LQ7zQuIbVrWjMCXkro5m6HsIT-oaGr-a","timestamp":1649640977413}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}