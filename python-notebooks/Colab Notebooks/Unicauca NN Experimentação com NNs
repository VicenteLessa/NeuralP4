{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1mLCRTikxh9tyI-F7NTmat_8ifc6gpFE2","timestamp":1681735696378},{"file_id":"13VBzwSbKgEQJjG3nrdu9WzYQatfmabFf","timestamp":1681602237614},{"file_id":"10U1kB83SIZYSqsKqdlJwPXnF0a587TYS","timestamp":1660767035622}],"toc_visible":true,"authorship_tag":"ABX9TyMVuU5axY1mn9/NoQT0lliR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["###Imports and Read CSV"],"metadata":{"id":"yojLIrVPoVI1"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21693,"status":"ok","timestamp":1681776214122,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"},"user_tz":180},"id":"93XXr2GHiBqA","outputId":"f42048bb-d127-4f90-b4c6-a75624d1ba91"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13040,"status":"ok","timestamp":1681776229632,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"},"user_tz":180},"id":"CT-15-PmiHZn","outputId":"2981880b-0a8e-4ebb-c5a0-0800a5b07602"},"outputs":[{"output_type":"stream","name":"stdout","text":["2.12.0\n"]}],"source":["import datetime\n","import json\n","import numpy as np\n","import os\n","import pandas as pd\n","import sys \n","import tensorflow as tf\n","import time\n","import matplotlib.pyplot as plt\n","import math\n","import random\n","\n","from sklearn.model_selection import KFold\n","from keras.callbacks import History \n","history = History()\n","\n","\n","number_of_NN_repetitions = 1\n","number_of_attributes = 10\n","BATCH_SIZE = 10\n","samples_per_class = 2000\n","\n","\n","print(tf.__version__)"]},{"cell_type":"markdown","source":["###Exploring the complete Dataframe"],"metadata":{"id":"O4LimCUdn5ys"}},{"cell_type":"code","source":["df_train = pd.read_csv('/content/drive/MyDrive/NN-P4/csv-files/df5_shuffled_df_train_10000_samples_10_category_classes.csv')\n","df_test = pd.read_csv('/content/drive/MyDrive/NN-P4/csv-files/df5_shuffled_df_test_2000_samples_10_category_classes.csv')\n","display(df_train)"],"metadata":{"id":"kGl8itfojl79","executionInfo":{"status":"ok","timestamp":1681776313507,"user_tz":180,"elapsed":2371,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}},"colab":{"base_uri":"https://localhost:8080/","height":487},"outputId":"16baf19b-bbda-4885-b32d-a78a4c0cea80"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["                               flow_key  src_ip_numeric           src_ip  \\\n","0      b7ecca82c77c3f43529eda7e107a63b4      3232267598   192.168.125.78   \n","1      14ea3e9562fe3e43d106b748b60d5e7c      3232268291    192.168.128.3   \n","2      ea8f777e413e6f61325eff6dff37383a      3232268304   192.168.128.16   \n","3      cf53ff055a9f8480f78940930156f2b0      3232268065   192.168.127.33   \n","4      0ea93b5c0f55429fc5deba57b497fbeb      3232266797   192.168.122.45   \n","...                                 ...             ...              ...   \n","99995  e1240e271fcc08f88f92c5df37851eec      3232268368   192.168.128.80   \n","99996  760420379cbae4d0dff936070d736a4d      3232268355   192.168.128.67   \n","99997  306db5f95e2840ace535b8e51fb896ed      3232268493  192.168.128.205   \n","99998  31a23402f9374d5ec904529e34603be4      3232266802   192.168.122.50   \n","99999  f2b797cc980e406b784279b878517f2b      3232268371   192.168.128.83   \n","\n","       src_port          dst_ip  dst_port  proto  pktTotalCount  \\\n","0         27778  172.16.255.200        53     17              2   \n","1         57003  149.154.175.50       443      6              3   \n","2         38464    157.240.6.54       443      6              8   \n","3         62884    157.240.6.54        80      6             64   \n","4         39193   157.240.14.52       443      6              1   \n","...         ...             ...       ...    ...            ...   \n","99995     62120    172.217.2.74       443      6              3   \n","99996     53666  172.16.255.200        53     17              2   \n","99997     45044  161.117.71.187        80      6             12   \n","99998     49940  194.143.245.39       443      6            133   \n","99999     58411   74.125.141.94       443     17            105   \n","\n","       octetTotalCount  min_ps  ...     b_flowEnd  b_flowDuration  b_min_piat  \\\n","0                  159      60  ...  1.559659e+09    0.000000e+00    0.000000   \n","1                  160      40  ...  1.556125e+09    0.000000e+00    0.000000   \n","2                  705      52  ...  1.559659e+09    1.558100e+12    0.010430   \n","3                12568      52  ...  1.559660e+09    1.558100e+12    0.000011   \n","4                   52      52  ...  0.000000e+00    0.000000e+00    0.000000   \n","...                ...     ...  ...           ...             ...         ...   \n","99995              156      52  ...  0.000000e+00    0.000000e+00    0.000000   \n","99996              154      63  ...  1.556139e+09    0.000000e+00    0.000000   \n","99997              940      52  ...  1.559685e+09    1.558126e+12    0.583505   \n","99998           151802      40  ...  1.556141e+09    1.554585e+12    0.000002   \n","99999            33930      44  ...  1.556291e+09    1.554735e+12    0.000002   \n","\n","       b_max_piat  b_avg_piat  b_std_dev_piat  flowEndReason  category  \\\n","0        0.000000    0.000000        0.000000              2      Chat   \n","1        0.000000    0.000000        0.000000              4      Chat   \n","2        2.116505    0.945037        0.875962              3      Chat   \n","3       31.991822    1.529501        6.083272              3      Chat   \n","4        0.000000    0.000000        0.000000              2      Chat   \n","...           ...         ...             ...            ...       ...   \n","99995    0.000000    0.000000        0.000000              2       Web   \n","99996    0.000000    0.000000        0.000000              2       Web   \n","99997   14.999155    4.212760        5.455162              2       Web   \n","99998   45.092240    1.083527        5.961781              3       Web   \n","99999   23.902115    0.570591        3.446854              2       Web   \n","\n","       application_protocol  web_service  \n","0                       DNS     WhatsApp  \n","1                       TLS     Telegram  \n","2                       TLS     WhatsApp  \n","3                      HTTP     WhatsApp  \n","4                       TLS     WhatsApp  \n","...                     ...          ...  \n","99995                   TLS       Google  \n","99996                   DNS    Microsoft  \n","99997               Unknown         HTTP  \n","99998               Unknown          TLS  \n","99999                  QUIC       Google  \n","\n","[100000 rows x 50 columns]"],"text/html":["\n","  <div id=\"df-c4dd0c1f-92a5-42c8-b41b-615799254c55\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>flow_key</th>\n","      <th>src_ip_numeric</th>\n","      <th>src_ip</th>\n","      <th>src_port</th>\n","      <th>dst_ip</th>\n","      <th>dst_port</th>\n","      <th>proto</th>\n","      <th>pktTotalCount</th>\n","      <th>octetTotalCount</th>\n","      <th>min_ps</th>\n","      <th>...</th>\n","      <th>b_flowEnd</th>\n","      <th>b_flowDuration</th>\n","      <th>b_min_piat</th>\n","      <th>b_max_piat</th>\n","      <th>b_avg_piat</th>\n","      <th>b_std_dev_piat</th>\n","      <th>flowEndReason</th>\n","      <th>category</th>\n","      <th>application_protocol</th>\n","      <th>web_service</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>b7ecca82c77c3f43529eda7e107a63b4</td>\n","      <td>3232267598</td>\n","      <td>192.168.125.78</td>\n","      <td>27778</td>\n","      <td>172.16.255.200</td>\n","      <td>53</td>\n","      <td>17</td>\n","      <td>2</td>\n","      <td>159</td>\n","      <td>60</td>\n","      <td>...</td>\n","      <td>1.559659e+09</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>2</td>\n","      <td>Chat</td>\n","      <td>DNS</td>\n","      <td>WhatsApp</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>14ea3e9562fe3e43d106b748b60d5e7c</td>\n","      <td>3232268291</td>\n","      <td>192.168.128.3</td>\n","      <td>57003</td>\n","      <td>149.154.175.50</td>\n","      <td>443</td>\n","      <td>6</td>\n","      <td>3</td>\n","      <td>160</td>\n","      <td>40</td>\n","      <td>...</td>\n","      <td>1.556125e+09</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>4</td>\n","      <td>Chat</td>\n","      <td>TLS</td>\n","      <td>Telegram</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ea8f777e413e6f61325eff6dff37383a</td>\n","      <td>3232268304</td>\n","      <td>192.168.128.16</td>\n","      <td>38464</td>\n","      <td>157.240.6.54</td>\n","      <td>443</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>705</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>1.559659e+09</td>\n","      <td>1.558100e+12</td>\n","      <td>0.010430</td>\n","      <td>2.116505</td>\n","      <td>0.945037</td>\n","      <td>0.875962</td>\n","      <td>3</td>\n","      <td>Chat</td>\n","      <td>TLS</td>\n","      <td>WhatsApp</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>cf53ff055a9f8480f78940930156f2b0</td>\n","      <td>3232268065</td>\n","      <td>192.168.127.33</td>\n","      <td>62884</td>\n","      <td>157.240.6.54</td>\n","      <td>80</td>\n","      <td>6</td>\n","      <td>64</td>\n","      <td>12568</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>1.559660e+09</td>\n","      <td>1.558100e+12</td>\n","      <td>0.000011</td>\n","      <td>31.991822</td>\n","      <td>1.529501</td>\n","      <td>6.083272</td>\n","      <td>3</td>\n","      <td>Chat</td>\n","      <td>HTTP</td>\n","      <td>WhatsApp</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0ea93b5c0f55429fc5deba57b497fbeb</td>\n","      <td>3232266797</td>\n","      <td>192.168.122.45</td>\n","      <td>39193</td>\n","      <td>157.240.14.52</td>\n","      <td>443</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>52</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>2</td>\n","      <td>Chat</td>\n","      <td>TLS</td>\n","      <td>WhatsApp</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>99995</th>\n","      <td>e1240e271fcc08f88f92c5df37851eec</td>\n","      <td>3232268368</td>\n","      <td>192.168.128.80</td>\n","      <td>62120</td>\n","      <td>172.217.2.74</td>\n","      <td>443</td>\n","      <td>6</td>\n","      <td>3</td>\n","      <td>156</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>2</td>\n","      <td>Web</td>\n","      <td>TLS</td>\n","      <td>Google</td>\n","    </tr>\n","    <tr>\n","      <th>99996</th>\n","      <td>760420379cbae4d0dff936070d736a4d</td>\n","      <td>3232268355</td>\n","      <td>192.168.128.67</td>\n","      <td>53666</td>\n","      <td>172.16.255.200</td>\n","      <td>53</td>\n","      <td>17</td>\n","      <td>2</td>\n","      <td>154</td>\n","      <td>63</td>\n","      <td>...</td>\n","      <td>1.556139e+09</td>\n","      <td>0.000000e+00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>2</td>\n","      <td>Web</td>\n","      <td>DNS</td>\n","      <td>Microsoft</td>\n","    </tr>\n","    <tr>\n","      <th>99997</th>\n","      <td>306db5f95e2840ace535b8e51fb896ed</td>\n","      <td>3232268493</td>\n","      <td>192.168.128.205</td>\n","      <td>45044</td>\n","      <td>161.117.71.187</td>\n","      <td>80</td>\n","      <td>6</td>\n","      <td>12</td>\n","      <td>940</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>1.559685e+09</td>\n","      <td>1.558126e+12</td>\n","      <td>0.583505</td>\n","      <td>14.999155</td>\n","      <td>4.212760</td>\n","      <td>5.455162</td>\n","      <td>2</td>\n","      <td>Web</td>\n","      <td>Unknown</td>\n","      <td>HTTP</td>\n","    </tr>\n","    <tr>\n","      <th>99998</th>\n","      <td>31a23402f9374d5ec904529e34603be4</td>\n","      <td>3232266802</td>\n","      <td>192.168.122.50</td>\n","      <td>49940</td>\n","      <td>194.143.245.39</td>\n","      <td>443</td>\n","      <td>6</td>\n","      <td>133</td>\n","      <td>151802</td>\n","      <td>40</td>\n","      <td>...</td>\n","      <td>1.556141e+09</td>\n","      <td>1.554585e+12</td>\n","      <td>0.000002</td>\n","      <td>45.092240</td>\n","      <td>1.083527</td>\n","      <td>5.961781</td>\n","      <td>3</td>\n","      <td>Web</td>\n","      <td>Unknown</td>\n","      <td>TLS</td>\n","    </tr>\n","    <tr>\n","      <th>99999</th>\n","      <td>f2b797cc980e406b784279b878517f2b</td>\n","      <td>3232268371</td>\n","      <td>192.168.128.83</td>\n","      <td>58411</td>\n","      <td>74.125.141.94</td>\n","      <td>443</td>\n","      <td>17</td>\n","      <td>105</td>\n","      <td>33930</td>\n","      <td>44</td>\n","      <td>...</td>\n","      <td>1.556291e+09</td>\n","      <td>1.554735e+12</td>\n","      <td>0.000002</td>\n","      <td>23.902115</td>\n","      <td>0.570591</td>\n","      <td>3.446854</td>\n","      <td>2</td>\n","      <td>Web</td>\n","      <td>QUIC</td>\n","      <td>Google</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>100000 rows × 50 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4dd0c1f-92a5-42c8-b41b-615799254c55')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c4dd0c1f-92a5-42c8-b41b-615799254c55 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c4dd0c1f-92a5-42c8-b41b-615799254c55');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}}]},{"cell_type":"code","source":["#labels are categories\n","df_train = df_train.drop(axis=1,columns=['flow_key', 'src_ip_numeric', 'src_ip', 'src_port', 'dst_ip', 'dst_port', 'proto', 'std_dev_ps', 'flowStart', 'flowEnd', 'f_pktTotalCount', 'f_octetTotalCount', 'f_min_ps', 'f_max_ps', 'f_avg_ps', 'f_std_dev_ps', 'f_flowStart', 'f_flowEnd', 'f_flowDuration', 'f_min_piat', 'f_max_piat', 'f_avg_piat', 'f_std_dev_piat', 'b_pktTotalCount', 'b_octetTotalCount', 'b_min_ps', 'b_max_ps', 'b_avg_ps', 'b_std_dev_ps', 'b_flowStart', 'b_flowEnd', 'b_flowDuration', 'b_min_piat', 'b_max_piat', 'b_avg_piat', 'b_std_dev_piat', 'flowEndReason', 'application_protocol', 'web_service'])\n","df_test = df_test.drop(axis=1,columns=['flow_key', 'src_ip_numeric', 'src_ip', 'src_port', 'dst_ip', 'dst_port', 'proto', 'std_dev_ps', 'flowStart', 'flowEnd', 'f_pktTotalCount', 'f_octetTotalCount', 'f_min_ps', 'f_max_ps', 'f_avg_ps', 'f_std_dev_ps', 'f_flowStart', 'f_flowEnd', 'f_flowDuration', 'f_min_piat', 'f_max_piat', 'f_avg_piat', 'f_std_dev_piat', 'b_pktTotalCount', 'b_octetTotalCount', 'b_min_ps', 'b_max_ps', 'b_avg_ps', 'b_std_dev_ps', 'b_flowStart', 'b_flowEnd', 'b_flowDuration', 'b_min_piat', 'b_max_piat', 'b_avg_piat', 'b_std_dev_piat', 'flowEndReason', 'application_protocol', 'web_service'])\n","target_train = df_train.pop('category')\n","target_test = df_test.pop('category')\n","\n","#labels are web services\n","# df_train = df_train.drop(axis=1,columns=['flow_key', 'src_ip_numeric', 'src_ip', 'src_port', 'dst_ip', 'dst_port', 'proto', 'std_dev_ps', 'flowStart', 'flowEnd', 'f_pktTotalCount', 'f_octetTotalCount', 'f_min_ps', 'f_max_ps', 'f_avg_ps', 'f_std_dev_ps', 'f_flowStart', 'f_flowEnd', 'f_flowDuration', 'f_min_piat', 'f_max_piat', 'f_avg_piat', 'f_std_dev_piat', 'b_pktTotalCount', 'b_octetTotalCount', 'b_min_ps', 'b_max_ps', 'b_avg_ps', 'b_std_dev_ps', 'b_flowStart', 'b_flowEnd', 'b_flowDuration', 'b_min_piat', 'b_max_piat', 'b_avg_piat', 'b_std_dev_piat', 'flowEndReason', 'category', 'application_protocol'])\n","# df_test = df_test.drop(axis=1,columns=['flow_key', 'src_ip_numeric', 'src_ip', 'src_port', 'dst_ip', 'dst_port', 'proto', 'std_dev_ps', 'flowStart', 'flowEnd', 'f_pktTotalCount', 'f_octetTotalCount', 'f_min_ps', 'f_max_ps', 'f_avg_ps', 'f_std_dev_ps', 'f_flowStart', 'f_flowEnd', 'f_flowDuration', 'f_min_piat', 'f_max_piat', 'f_avg_piat', 'f_std_dev_piat', 'b_pktTotalCount', 'b_octetTotalCount', 'b_min_ps', 'b_max_ps', 'b_avg_ps', 'b_std_dev_ps', 'b_flowStart', 'b_flowEnd', 'b_flowDuration', 'b_min_piat', 'b_max_piat', 'b_avg_piat', 'b_std_dev_piat', 'flowEndReason', 'category', 'application_protocol'])\n","# target_train = df_train.pop('web_service')\n","# target_test = df_test.pop('web_service')"],"metadata":{"id":"4khj93Re06KC","executionInfo":{"status":"error","timestamp":1681781210142,"user_tz":180,"elapsed":393,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}},"colab":{"base_uri":"https://localhost:8080/","height":561},"outputId":"2d17d6d6-6df5-4683-ba6f-0fe67958f1a0"},"execution_count":18,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-26af13b5d4bb>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#labels are categories\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'flow_key'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'src_ip_numeric'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'src_ip'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'src_port'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'dst_ip'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'dst_port'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'proto'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'std_dev_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'flowStart'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'flowEnd'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_pktTotalCount'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_octetTotalCount'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_min_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_max_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_avg_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_std_dev_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_flowStart'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_flowEnd'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_flowDuration'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_min_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_max_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_avg_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_std_dev_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_pktTotalCount'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_octetTotalCount'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_min_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_max_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_avg_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_std_dev_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_flowStart'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_flowEnd'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_flowDuration'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_min_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_max_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_avg_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_std_dev_piat'\u001b[0m\u001b[0;34m,\u001b[...\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdf_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'flow_key'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'src_ip_numeric'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'src_ip'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'src_port'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'dst_ip'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'dst_port'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'proto'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'std_dev_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'flowStart'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'flowEnd'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_pktTotalCount'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_octetTotalCount'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_min_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_max_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_avg_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_std_dev_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_flowStart'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_flowEnd'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_flowDuration'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_min_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_max_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_avg_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'f_std_dev_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_pktTotalCount'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_octetTotalCount'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_min_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_max_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_avg_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_std_dev_ps'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_flowStart'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_flowEnd'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_flowDuration'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_min_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_max_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_avg_piat'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'b_std_dev_piat'\u001b[0m\u001b[0;34m,\u001b[0...\n\u001b[1;32m      4\u001b[0m \u001b[0mtarget_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'category'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mtarget_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'category'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5397\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5398\u001b[0m         \"\"\"\n\u001b[0;32m-> 5399\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5400\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5401\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    329\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 )\n\u001b[0;32m--> 331\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    333\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4503\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4504\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4505\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4506\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4507\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4544\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4545\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4546\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4547\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4548\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6932\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6933\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6934\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{list(labels[mask])} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6935\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6936\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"['flow_key', 'src_ip_numeric', 'src_ip', 'src_port', 'dst_ip', 'dst_port', 'proto', 'std_dev_ps', 'flowStart', 'flowEnd', 'f_pktTotalCount', 'f_octetTotalCount', 'f_min_ps', 'f_max_ps', 'f_avg_ps', 'f_std_dev_ps', 'f_flowStart', 'f_flowEnd', 'f_flowDuration', 'f_min_piat', 'f_max_piat', 'f_avg_piat', 'f_std_dev_piat', 'b_pktTotalCount', 'b_octetTotalCount', 'b_min_ps', 'b_max_ps', 'b_avg_ps', 'b_std_dev_ps', 'b_flowStart', 'b_flowEnd', 'b_flowDuration', 'b_min_piat', 'b_max_piat', 'b_avg_piat', 'b_std_dev_piat', 'flowEndReason', 'application_protocol', 'web_service'] not found in axis\""]}]},{"cell_type":"code","source":["df_train = np.asarray(df_train).astype(np.float32)\n","df_test = np.asarray(df_test).astype(np.float32)\n","\n","#transformr\n","cols = ['pktTotalCount','octetTotalCount','min_ps','max_ps','avg_ps','flowDuration','min_piat','max_piat','avg_piat','std_dev_piat']\n","df_test[cols] = df_test[cols].applymap(np.int64)\n","display(df_test)\n","display((df_test[\"min_piat\"].head(30)))"],"metadata":{"id":"fKK5hizbRfCn","executionInfo":{"status":"ok","timestamp":1681781220829,"user_tz":180,"elapsed":227,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["targets = np.concatenate([([i]*10000) for i in [0,1,2,3,4,5,6,7,8,9]], axis=0)\n","target_train = targets.copy()\n","print(target_train)\n","targets = np.concatenate([([i]*2000) for i in [0,1,2,3,4,5,6,7,8,9]], axis=0)\n","target_test = targets.copy()\n","print(target_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nq6HVWM-RUNm","executionInfo":{"status":"ok","timestamp":1681781249409,"user_tz":180,"elapsed":230,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}},"outputId":"bb4d2821-99e2-4981-c478-dcfc7bcd882b"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 0 ... 9 9 9]\n","[0 0 0 ... 9 9 9]\n"]}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DxQaxUFsEr-s","executionInfo":{"status":"ok","timestamp":1681782934762,"user_tz":180,"elapsed":338,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}},"outputId":"9484506b-15ea-49cc-c20f-59143de1a614"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1.0200e+02 9.4407e+04 4.0000e+01 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n"," [7.0000e+01 7.6710e+03 5.2000e+01 ... 1.5000e+02 4.0000e+00 1.9000e+01]\n"," [1.8000e+01 2.0320e+03 5.2000e+01 ... 9.0000e+00 0.0000e+00 2.0000e+00]\n"," ...\n"," [1.0000e+01 1.2220e+03 4.0000e+01 ... 1.1000e+01 1.0000e+00 3.0000e+00]\n"," [1.2000e+01 6.1650e+03 4.8000e+01 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n"," [3.0000e+00 1.5600e+02 5.2000e+01 ... 6.0000e+00 4.0000e+00 1.0000e+00]]\n"]}]},{"cell_type":"code","source":["# #target_train = [int(i) for i in target_train]\n","\n","# for i,label in enumerate(target_train.head(10)):\n","#   print(i,label)\n","#   #target_train[i] = top10.index(label)\n","# #print(target_train.head(10))\n","\n","#targets = numpy.concatenate([([i]*1000) for i in [0,1,2,3,4,5,6,7,8,9]], axis=0)\n"],"metadata":{"id":"DUxt6zuB_LYT"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":24,"metadata":{"id":"tj2cFHLXkoXh","executionInfo":{"status":"ok","timestamp":1681781251351,"user_tz":180,"elapsed":1,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}}},"outputs":[],"source":["def get_basic_model():\n","  model = tf.keras.Sequential([\n","    normalizer,\n","    tf.keras.layers.Dense(10, activation='relu'),\n","    tf.keras.layers.Dense(10)\n","  ])\n","\n","  model.compile(optimizer='adam',\n","                loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n","                metrics=['accuracy'])\n","  return model"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":902},"id":"7dGpBjoEjAgX","executionInfo":{"status":"error","timestamp":1681781462895,"user_tz":180,"elapsed":210230,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}},"outputId":"72755ee2-e597-4818-fed6-418c92ccae8e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","10000/10000 [==============================] - 19s 2ms/step - loss: 1.9834 - accuracy: 0.3232\n","Epoch 2/10\n","10000/10000 [==============================] - 19s 2ms/step - loss: 1.8159 - accuracy: 0.3755\n","Epoch 3/10\n","10000/10000 [==============================] - 19s 2ms/step - loss: 1.7656 - accuracy: 0.3908\n","Epoch 4/10\n","10000/10000 [==============================] - 18s 2ms/step - loss: 1.7365 - accuracy: 0.4013\n","Epoch 5/10\n","10000/10000 [==============================] - 18s 2ms/step - loss: 1.7152 - accuracy: 0.4071\n","Epoch 6/10\n","10000/10000 [==============================] - 19s 2ms/step - loss: 1.6981 - accuracy: 0.4098\n","Epoch 7/10\n","10000/10000 [==============================] - 19s 2ms/step - loss: 1.6847 - accuracy: 0.4127\n","Epoch 8/10\n","10000/10000 [==============================] - 19s 2ms/step - loss: 1.6731 - accuracy: 0.4131\n","Epoch 9/10\n","10000/10000 [==============================] - 18s 2ms/step - loss: 1.6636 - accuracy: 0.4154\n","Epoch 10/10\n","10000/10000 [==============================] - 19s 2ms/step - loss: 1.6561 - accuracy: 0.4165\n","2000/2000 - 2s - loss: 1.6532 - accuracy: 0.4200 - 2s/epoch - 1ms/step\n","1: train_accuracy:[0.4165000021457672] test_acc:[0.419950008392334]\n","625/625 [==============================] - 1s 1ms/step\n","tf.Tensor(\n","[[ 785    4   23   98   14  566  293   69   76   72]\n"," [  47   48  155   75  103  966  132   67  296  111]\n"," [  49   28  453  100  158  728   49   22   94  319]\n"," [ 172   11   64  654   83  764   27    1   49  175]\n"," [ 109   17  134  234  531  502   36  158   10  269]\n"," [   2    3    0    6    6 1612  186  183    0    2]\n"," [ 276    4   52  173   13  369  789   43  160  121]\n"," [   0    1    0    2    0   12   47 1927    2    9]\n"," [  16    6  167   30   46  229  202   29 1108  167]\n"," [ 123   18  158  166  206  405   70   80  282  492]], shape=(10, 10), dtype=int32)\n","train_accuracy_mean:0.4165000021457672 test_acc_mean: 0.419950008392334\n"]},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-b68fa0eb0177>\u001b[0m in \u001b[0;36m<cell line: 51>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     49\u001b[0m }\n\u001b[1;32m     50\u001b[0m \u001b[0;31m# Writes into the file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m \u001b[0mtitle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/drive/MyDrive/network-traffic-classification-main/nn-reports/%s\"\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0mcurrent_date_and_time_string\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\" With %d samples_per_class.json\"\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0msamples_per_class\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"w\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m   \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdump\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreport\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'samples_per_class' is not defined"]}],"source":["# Converts pandas dataframe to tensorflow object\n","df_train = tf.convert_to_tensor(df_train)\n","# Normalize the data\n","normalizer = tf.keras.layers.Normalization(axis=-1)\n","normalizer.adapt(df_train)\n","#normalizer.adapt(numeric_features_test)\n","\n","# Execute Trainning and Testing\n","#model = get_basic_model()\n","train_accuracy = []\n","test_acc = []\n","for i in range(number_of_NN_repetitions):\n","  model = get_basic_model()\n","  history = model.fit(df_train, target_train, epochs=BATCH_SIZE, verbose=1, batch_size=BATCH_SIZE, callbacks=[history])\n","  one_train_accuracy = history.history['accuracy']\n","\n","  test_loss, one_test_acc =  model.evaluate(df_test,  target_test, verbose=2, batch_size=BATCH_SIZE)\n","  train_accuracy.append(one_train_accuracy[-1])\n","  test_acc.append(one_test_acc)\n","  print(f\"{i+1}: train_accuracy:{train_accuracy} test_acc:{test_acc}\")\n","  tf_predictions_probabilities = model.predict(df_test)\n","  #tf_loss, tf_acc =  model.evaluate(numeric_features_test,  target_test, verbose=2, batch_size=BATCH_SIZE)\n","\n","  tf_predictions = []\n","\n","  for i,x in enumerate(tf_predictions_probabilities):\n","    #print(\"i:\",i,\"x_max:\",x.max(),\"x:\",x)  \n","    j_max = x.argmax()\n","    tf_predictions.append(j_max)  \n","\n","  conf_m = tf.math.confusion_matrix(target_test,tf_predictions)\n","  print(conf_m)\n","\n","\n","train_accuracy_mean = sum(train_accuracy) / len(train_accuracy)\n","test_acc_mean = sum(test_acc) / len(test_acc)\n","print(f'train_accuracy_mean:{train_accuracy_mean} test_acc_mean: {test_acc_mean}')\n","# Date for report file\n","current_date_and_time = datetime.date.today()\n","current_date_and_time_string = str(current_date_and_time)\n","# Report file content\n","report = {\n","    \"datetime\": current_date_and_time_string,\n","    \"training_dataset_shape\":  str(df_train.shape),\n","    \"test_dataset_shape\": str(df_test.shape),\n","    \"number_of_attributes\": number_of_attributes,\n","    \"accuracy_train\": train_accuracy_mean,\n","    \"accuracy_test\": test_acc_mean\n","}\n","# Writes into the file\n","title = \"/content/drive/MyDrive/network-traffic-classification-main/nn-reports/%s\"%current_date_and_time_string + \" With %d samples_per_class.json\"%samples_per_class\n","with open(title, \"w\") as f:\n","  json.dump(report, f)\n","title_without_date = \"/content/drive/MyDrive/network-traffic-classification-main/nn-reports/last run with %d samples_per_class.json\"%samples_per_class\n","with open(title_without_date, \"w\") as f:\n","  json.dump(report, f)\n","with open(title, \"r\") as f:\n","  rep = json.load(f)\n","#display(rep)\n","\n","#print(rep[\"datetime\"])\n","\n"]}]}