{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NN Reduzida para exportar pro P4","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyMufkh+FMTRGel4doulUxjZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":58663,"status":"ok","timestamp":1660767277099,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"},"user_tz":180},"id":"93XXr2GHiBqA","outputId":"5d8ca9db-c47a-4e58-cd36-1bec27acbe0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3404,"status":"ok","timestamp":1660767284787,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"},"user_tz":180},"id":"CT-15-PmiHZn","outputId":"126956c8-2cf8-4d47-b964-f3890d73c362"},"outputs":[{"output_type":"stream","name":"stdout","text":["2.9.1\n"]}],"source":["import datetime\n","import json\n","import numpy as np\n","import os\n","import pandas as pd\n","import sys \n","import tensorflow as tf\n","import time\n","import matplotlib.pyplot as plt\n","import math\n","from sklearn.model_selection import KFold\n","from keras.callbacks import History \n","history = History()\n","\n","BATCH_SIZE = 10\n","\n","print(tf.__version__)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2100,"status":"ok","timestamp":1659893550080,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"},"user_tz":180},"id":"Axt9vLxMiO-6","outputId":"8d2ed250-f50f-4a49-b855-921a34ca5163"},"outputs":[{"output_type":"stream","name":"stdout","text":["['83', '82', '79', '90', '88', '84', '15', '17', '29', '22', '89', '59', '87', '10', '80', '60', '64', '38', '45', '33', '63', '61', '36', '24', '47', '31', '37', '81', '62', '91', '32', '46', '34', '48', '92']\n"]}],"source":["path_training =\"/content/drive/MyDrive/network-traffic-classification-main/csv-files/01_Atributos_Weve.csv\"\n","path_test =\"/content/drive/MyDrive/network-traffic-classification-main/csv-files/02_Atributos_Weve.csv\"\n","df_raw = pd.read_csv(path_training)\n","df_test_raw = pd.read_csv(path_test)\n","df_raw\n","target = df_raw.pop('target')\n","server_port = df_raw.pop('ServerPort')\n","client_port = df_raw.pop('ClientPort')\n","\n","target_test = df_test_raw.pop('target')\n","server_port_test = df_test_raw.pop('ServerPort')\n","client_port = df_test_raw.pop('ClientPort')\n","\n","#attr_title = \"/content/drive/MyDrive/network-traffic-classification-main/nn-attribute-arrays/JSON-ATTRIBUTES-FILE-HERE\"\n","attr_title = \"/content/drive/MyDrive/network-traffic-classification-main/nn-attribute-arrays/last-run\"\n","with open(attr_title, \"r\") as f:\n","  rep = json.load(f)\n","  print(rep['sorted_attributes_by_weights']) \n","\n","attributes_array = rep['sorted_attributes_by_weights']      "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IpS_SqH4WXuE"},"outputs":[],"source":["classes = ['WWW','MAIL','FTP-CONTROL','FTP-PASV','ATTACK','P2P','DATABASE','FTP-DATA','MULTIMEDIA','SERVICES','INTERACTIVE','GAMES']\n","#Converts the above list of classes to an array of index\n","target = target.apply(lambda x: classes.index(x))\n","target_test = target_test.apply(lambda x: classes.index(x))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tj2cFHLXkoXh"},"outputs":[],"source":["def get_basic_model():\n","  model = tf.keras.Sequential([\n","    normalizer,\n","    tf.keras.layers.Dense(3, activation='relu'),  \n","    tf.keras.layers.Dense(12)  \n","  ])\n","\n","  model.compile(optimizer='adam',\n","                loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n","                metrics=['accuracy'])\n","  return model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":401},"id":"7dGpBjoEjAgX","executionInfo":{"status":"ok","timestamp":1659893596920,"user_tz":180,"elapsed":39271,"user":{"displayName":"Vicente Lessa","userId":"14551761473643883791"}},"outputId":"c4da87fc-0ee0-4333-970c-a76548536e4c"},"outputs":[{"output_type":"stream","name":"stdout","text":["normalizer.variance, normalizer.mean tf.Tensor([[ 23767.549 198044.67 ]], shape=(1, 2), dtype=float32) tf.Tensor([[221.51576 489.4999 ]], shape=(1, 2), dtype=float32)\n","2381/2381 - 3s - loss: 0.3253 - accuracy: 0.9187 - 3s/epoch - 1ms/step\n","train_accuracy:0.9467068910598755 test_accuracy:0.9187428951263428\n","INFO:tensorflow:Assets written to: /content/drive/MyDrive/network-traffic-classification-main/tf-models/my_model_p4/assets\n"]},{"output_type":"display_data","data":{"text/plain":["{'accuracy_test': 0.9187428951263428,\n"," 'accuracy_train': [0.8171945810317993,\n","  0.9158371090888977,\n","  0.9275012612342834,\n","  0.9316239356994629,\n","  0.9351432919502258,\n","  0.9386626482009888,\n","  0.9418803453445435,\n","  0.9446455240249634,\n","  0.9463046789169312,\n","  0.9467068910598755],\n"," 'attributes': ['83', '82'],\n"," 'datetime': '2022-08-07',\n"," 'number_of_attributes': 2,\n"," 'test_dataset_shape': [23801, 2],\n"," 'training_dataset_shape': [24863, 2]}"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["2022-08-07\n"]}],"source":["# Select a sub-dataframe from the main dataframe with a lower number of attributes\n","# Only 2 attributes: maximun and minimun segment size \n","df = df_raw[attributes_array[0:2]]\n","df_test = df_test_raw[attributes_array[0:2]]\n","#print(df_test)\n","\n","# Combine the data with possible classes\n","numeric_feature_names = attributes_array[0:2]\n","numeric_features = df[numeric_feature_names] # Data for training\n","numeric_features_test = df_test[numeric_feature_names] # Data for testing\n","\n","# Converts pandas dataframe to tensorflow object\n","numeric_features = tf.convert_to_tensor(numeric_features)\n","#numeric_features_test = tf.convert_to_tensor(numeric_features_test)\n","\n","# Normalize the data\n","normalizer = tf.keras.layers.Normalization(axis=-1)\n","normalizer.adapt(numeric_features)\n","print(\"normalizer.variance, normalizer.mean\", normalizer.variance, normalizer.mean)\n","#normalizer.adapt(numeric_features_test)\n","\n","# Execute Trainning and Testing \n","model = get_basic_model()\n","history = model.fit(numeric_features, target, epochs=10, validation_split=0.2, verbose=0, batch_size=BATCH_SIZE, callbacks=[history])\n","train_accuracy = history.history['accuracy']\n","\n","test_loss, test_accuracy =  model.evaluate(numeric_features_test,  target_test, verbose=2, batch_size=BATCH_SIZE)\n","print(f\"train_accuracy:{train_accuracy[-1]} test_accuracy:{test_accuracy}\")\n","\n","# Calling `save('my_model')` creates a SavedModel folder `my_model`.\n","model.save(\"/content/drive/MyDrive/network-traffic-classification-main/tf-models/my_model\") \n","\n","\n","\n","# Date for report file\n","current_date_and_time = datetime.date.today()\n","current_date_and_time_string = str(current_date_and_time)\n","# Report file content\n","report = {\n","    \"datetime\": current_date_and_time_string,\n","    \"training_dataset_shape\":  df.shape,\n","    \"test_dataset_shape\": df_test.shape,\n","    \"attributes\": attributes_array[0:df.shape[1]],\n","    \"number_of_attributes\": 2,\n","    \"accuracy_train\": train_accuracy,\n","    \"accuracy_test\": test_accuracy\n","    #\"norm_layer_weights\": norm_layer_weights\n","    #\"hidden_layer_weights\": hidden_layer_weights\n","}\n","# Writes into the file\n","title = \"/content/drive/MyDrive/network-traffic-classification-main/nn-reports/%s\"%current_date_and_time_string + \" NN to generate P4 files with attr83e82.json\"\n","with open(title, \"w\") as f:\n","  json.dump(report, f)\n","title_without_date = \"/content/drive/MyDrive/network-traffic-classification-main/nn-reports/last run with %d Attributes.json\"\n","with open(title_without_date, \"w\") as f:\n","  json.dump(report, f)\n","with open(title, \"r\") as f:\n","  rep = json.load(f)\n","display(rep)\n","\n","print(rep[\"datetime\"])"]}]}